/// <reference types="node" />
import * as net from "net";
import * as http from "http";
import { WebSocketServer, IServerOptions } from "./ws";
import { MatchMaker, RegisteredHandler } from "./MatchMaker";
import { Client } from "./index";
export declare type ServerOptions = IServerOptions & {
    ws?: WebSocketServer;
};
export declare class Server {
    protected server: WebSocketServer;
    protected httpServer: net.Server | http.Server;
    protected matchMaker: MatchMaker;
    protected _onShutdown: () => void | Promise<any>;
    constructor(options?: ServerOptions);
    attach(options: ServerOptions): void;
    listen(port: number, hostname?: string, backlog?: number, listeningListener?: Function): void;
    register(name: string, handler: Function, options?: any): RegisteredHandler;
    onShutdown(callback: () => void | Promise<any>): void;
    onConnection: (client: Client, req?: http.IncomingMessage) => void;
    protected onMessageMatchMaking(client: Client, message: any): void;
}
