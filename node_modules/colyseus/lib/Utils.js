"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//
// nodemon sends SIGUSR2 before reloading
// (https://github.com/remy/nodemon#controlling-shutdown-of-your-script)
//
function registerGracefulShutdown(callback) {
    var calledOnce = false;
    ['SIGINT', 'SIGTERM', 'SIGUSR2'].forEach(function (signal) {
        process.once(signal, function () { return callback(signal); });
    });
}
exports.registerGracefulShutdown = registerGracefulShutdown;
var Deferred = /** @class */ (function () {
    function Deferred() {
        var _this = this;
        this.promise = new Promise(function (resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        });
    }
    Deferred.prototype.then = function (func) {
        return this.promise.then(func);
    };
    Deferred.prototype.catch = function (func) {
        return this.promise.catch(func);
    };
    return Deferred;
}());
exports.Deferred = Deferred;
function spliceOne(arr, index) {
    // manually splice availableRooms array
    // http://jsperf.com/manual-splice
    if (index === -1 || index >= arr.length) {
        return false;
    }
    for (var i = index, len = arr.length - 1; i < len; i++) {
        arr[i] = arr[i + 1];
    }
    arr.length = len;
    return true;
}
exports.spliceOne = spliceOne;
function merge(a) {
    var objs = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        objs[_i - 1] = arguments[_i];
    }
    for (var i = 0, len = objs.length; i < len; i++) {
        var b = objs[i];
        for (var key in b) {
            if (b.hasOwnProperty(key)) {
                a[key] = b[key];
            }
        }
    }
    return a;
}
exports.merge = merge;
function logError(err) {
    if (err) {
        console.log(err);
    }
}
exports.logError = logError;
